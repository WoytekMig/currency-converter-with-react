{"version":3,"sources":["Form/Span/index.js","Form/Result/index.js","Form/Date/index.js","Form/currencies.js","Form/index.js","App.js","index.js"],"names":["Span","_ref","text","React","createElement","className","Result","result","undefined","Fragment","moneyHeld","toFixed","currencyHeld","resultCalc","currencyWanted","DateAndHour","_useState","useState","Date","_useState2","_slicedToArray","currentDate","setCurrentDate","useEffect","timer","setInterval","clearInterval","toLocaleDateString","weekday","day","month","year","toLocaleTimeString","currencies","id","ratio","Form","setMoneyHeld","_useState3","_useState4","setCurrencyHeld","_useState5","_useState6","setCurrencyWanted","_useState7","_useState8","setResult","getResult","currencyHeldRatio","find","_ref3","currencyWantedRatio","_ref4","onSubmit","event","preventDefault","value","onChange","target","map","currency","key","type","_ref5","min","step","required","placeholder","_ref2","onClick","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f6280a80.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './index.css';\r\n\r\nconst Span = ({ text }) => (\r\n    <span className=\"span\">\r\n        {text}\r\n    </span>\r\n);\r\n\r\nexport default Span;","import React from \"react\";\r\nimport Span from \"../Span\";\r\n\r\nconst Result = ({ result }) => (\r\n\r\n    <div>\r\n        {result !== undefined && (\r\n            <>\r\n                <Span text=\"Your calculation will look like :&nbsp;\" />\r\n                <strong className=\"form__result\">\r\n                    {result.moneyHeld.toFixed(2)}&nbsp; {result.currencyHeld}&nbsp; {\"= \"}\r\n                    {result.resultCalc.toFixed(2)}&nbsp; {result.currencyWanted}\r\n                </strong>\r\n            </>\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default Result;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport './index.css';\r\n\r\nconst DateAndHour = () => {\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setCurrentDate(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <span className=\"form__date\">\r\n            Today is {currentDate.toLocaleDateString(\"en\", {\r\n                weekday: \"long\",\r\n                day: \"numeric\",\r\n                month: \"long\",\r\n                year: \"numeric\"\r\n            })}&nbsp;\r\n            {currentDate.toLocaleTimeString()}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default DateAndHour;","export const currencies = [\r\n    {\r\n        id: \"PLN\",\r\n        ratio: 1,\r\n    },\r\n    {\r\n        id: \"EUR\",\r\n        ratio: 4.697,\r\n    },\r\n    {\r\n        id: \"GBP\",\r\n        ratio: 5.351,\r\n    },\r\n    {\r\n        id: \"USD\",\r\n        ratio: 4.401,\r\n    }\r\n];\r\n\r\n/* export {currencies}; */\r\n","import React, { useState } from \"react\";\r\nimport Span from \"./Span\";\r\nimport Result from \"./Result\";\r\nimport DateAndHour from \"./Date\";\r\nimport { currencies } from \"./currencies\";\r\nimport \"./index.css\";\r\n\r\nconst Form = () => {\r\n    const [moneyHeld, setMoneyHeld] = useState(\"\");\r\n    const [currencyHeld, setCurrencyHeld] = useState(currencies[0].id);\r\n    const [currencyWanted, setCurrencyWanted] = useState(currencies[0].id);\r\n    const [result, setResult] = useState(undefined);\r\n\r\n    const onSetCurrencyHeld = ({ target }) => setCurrencyHeld(target.value);\r\n    const onSetCurrencyWanted = ({ target }) => setCurrencyWanted(target.value);\r\n\r\n    const getResult = (currencies, moneyHeld, currencyHeld, currencyWanted) => {\r\n        const currencyHeldRatio = currencies.find(({ id }) => id === currencyHeld).ratio;\r\n        const currencyWantedRatio = currencies.find(({ id }) => id === currencyWanted).ratio;\r\n\r\n        setResult(\r\n            {\r\n                currencyHeld: currencyHeld,\r\n                currencyHeldRatio: currencyHeldRatio,\r\n                currencyWantedRatio: currencyWantedRatio,\r\n                moneyHeld: +moneyHeld,\r\n                currencyWanted: currencyWanted,\r\n                resultCalc: moneyHeld * currencyHeldRatio / currencyWantedRatio,\r\n            });\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        getResult(currencies, moneyHeld, currencyHeld, currencyWanted);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onFormSubmit}>\r\n            <fieldset className=\"form__fieldset form__border\">\r\n                <legend className=\"form__legend form__border\">\r\n                    Currency calculator\r\n                </legend>\r\n                <label>\r\n                    <DateAndHour />\r\n                    <Span text=\"Complete how much in  &nbsp;\" />\r\n                    <select\r\n                        value={currencyHeld}\r\n                        onChange={onSetCurrencyHeld}\r\n                    >\r\n                        {currencies.map((currency => (\r\n                            <option\r\n                                key={currency.ratio}\r\n                                value={currency.id}\r\n                            >\r\n                                {currency.id}\r\n                            </option>\r\n                        )))}\r\n                    </select>\r\n                    <Span text=\"do you have :\" />\r\n                    <input\r\n                        type=\"number\"\r\n                        value={moneyHeld}\r\n                        onChange={({ target }) => setMoneyHeld(target.value)}\r\n                        className=\"form__input\"\r\n                        min=\"0\"\r\n                        step=\"0.01\"\r\n                        required\r\n                        placeholder=\"Write here...\" />\r\n                    <Span text=\"Choose the currency you want &nbsp;:&nbsp; \" />\r\n                    <select\r\n                        value={currencyWanted}\r\n                        onChange={onSetCurrencyWanted}\r\n                    >\r\n                        {currencies.map((currencyWanted => (\r\n                            <option\r\n                                key={currencyWanted.ratio}\r\n                                value={currencyWanted.id}\r\n                            >\r\n                                {currencyWanted.id}\r\n                            </option>\r\n                        )))}\r\n                    </select>\r\n\r\n                    <Result result={result} />\r\n\r\n                </label>\r\n            </fieldset>\r\n            <button\r\n                className=\"form__button\"\r\n                onClick={() => getResult(currencies, moneyHeld, currencyHeld, currencyWanted)}\r\n            >\r\n                Calculate\r\n            </button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","import React from 'react';\nimport Form from './Form';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"mainContainer\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}